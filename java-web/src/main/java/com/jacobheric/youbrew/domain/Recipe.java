/*
 * Description: Recipe domain object (original's autogened)
 * 
 * @author: jacob heric
 * Date: 1/27/2010
 *
 */

package com.jacobheric.youbrew.domain;

import java.io.Serializable;
import java.util.Collections;
import java.util.Date;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.WeakHashMap;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.hibernate.proxy.HibernateProxy;


/** 
 * Object mapping for hibernate-handled table: recipe.
 * @author autogenerated
 */

@Entity
@Table(name = "recipe", catalog = "youbrew")
public class Recipe implements Cloneable, Serializable {

	/** Serial Version UID. */
	private static final long serialVersionUID = -559010458L;
	/** Use a WeakHashMap so entries will be garbage collected once all entities 
		referring to a saved hash are garbage collected themselves. */
	private static final Map<Serializable, Integer> SAVED_HASHES =
		Collections.synchronizedMap(new WeakHashMap<Serializable, Integer>());
	
	/** hashCode temporary storage. */
	private volatile Integer hashCode;
	

	/** Field mapping. */
	private String brewNotes;
	/** Field mapping. */
	private Date end;
	/** Field mapping. */
	private Integer id;
	/** Field mapping. */
	private String name;
	/** Field mapping. */
	private Set<Hop> hops = new HashSet<Hop>();

	/** Field mapping. */
	private Set<Malt> malts = new HashSet<Malt>();

	/** Field mapping. */
	private Date start;
	/** Field mapping. */
	private String tasteNotes;
	/** Field mapping. */
	private Yeast yeast;
	/**
	 * Default constructor, mainly for hibernate use.
	 */
	public Recipe() {
		// Default constructor
	} 

	/** Constructor taking a given ID.
	 * @param id to set
	 */
	public Recipe(Integer id) {
		this.id = id;
	}
	
	/** Constructor taking a given ID.
	 * @param end Date object;
	 * @param id Integer object;
	 * @param name String object;
	 * @param start Date object;
	 * @param yeast Yeast object;
	 */
	public Recipe(Date end, Integer id, String name, 					
			Date start, Yeast yeast) {

		this.end = end;
		this.id = id;
		this.name = name;
		this.start = start;
		this.yeast = yeast;
	}
	
 


 
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	@Transient
	public Class<?> getClassType() {
		return Recipe.class;
	}
 

    /**
     * Return the value associated with the column: brewNotes.
	 * @return A String object (this.brewNotes)
	 */
	@Column( name = "brew_notes", length = 1028  )
	public String getBrewNotes() {
		return this.brewNotes;
		
	}
	

  
    /**  
     * Set the value related to the column: brewNotes.
	 * @param brewNotes the brewNotes value you wish to set
	 */
	public void setBrewNotes(final String brewNotes) {
		this.brewNotes = brewNotes;
	}

    /**
     * Return the value associated with the column: end.
	 * @return A Date object (this.end)
	 */
	@Column( nullable = false  )
	public Date getEnd() {
		return this.end;
		
	}
	

  
    /**  
     * Set the value related to the column: end.
	 * @param end the end value you wish to set
	 */
	public void setEnd(final Date end) {
		this.end = end;
	}

    /**
     * Return the value associated with the column: id.
	 * @return A Integer object (this.id)
	 */
    @Id 
	@Column( name = "id", nullable = false  )
	public Integer getId() {
		return this.id;
		
	}
	

  
    /**  
     * Set the value related to the column: id.
	 * @param id the id value you wish to set
	 */
	public void setId(final Integer id) {
		// If we've just been persisted and hashCode has been
		// returned then make sure other entities with this
		// ID return the already returned hash code
		if ( (this.id == null || this.id == 0) &&
				(id != null) &&
				(this.hashCode != null) ) {
			SAVED_HASHES.put( id, this.hashCode );
		}
		this.id = id;
	}

    /**
     * Return the value associated with the column: name.
	 * @return A String object (this.name)
	 */
	@Column( nullable = false, length = 256  )
	public String getName() {
		return this.name;
		
	}
	

  
    /**  
     * Set the value related to the column: name.
	 * @param name the name value you wish to set
	 */
	public void setName(final String name) {
		this.name = name;
	}
	
   /**
    * @return the hops
    */
   @OneToMany(cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch=FetchType.EAGER)
   @JoinTable(name = "recipe_hops",
       joinColumns = @JoinColumn(name="recipe_id"),
       inverseJoinColumns = @JoinColumn(name="hop_id")
   )  
   public Set<Hop> getHops() {
      return hops;
   }	


  
    /**  
    * Set the value related to the column: hops.
	 * @param hops the hops value you wish to set
	 */
	public void setHops(final Set<Hop> hops) {
		this.hops = hops;
	}

   /**
    * @return the malts
    */
   @OneToMany(cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch=FetchType.EAGER)
   @JoinTable(name = "recipe_malts",
       joinColumns = @JoinColumn(name="recipe_id"),
       inverseJoinColumns = @JoinColumn(name="malt_id")
   )  
   public Set<Malt> getMalts() {
      return malts;
   }  
   
   /**  
    * Set the value related to the column: maltss.
    * @param malts the malts value you wish to set
    */
   public void setMalts(final Set<Malt> malts) {
      this.malts = malts;
   }
   
	
	/**
	 * Adds a bi-directional link of type RecipeMalts to the recipeMaltss set.
	 * @param recipeMalts item to add

	public void addRecipeMalts(RecipeMalts recipeMalts) {
		recipeMalts.setRecipe(this);
		this.recipeMaltss.add(recipeMalts);
	}
    */	

  

    /**
     * Return the value associated with the column: start.
	 * @return A Date object (this.start)
	 */
	@Column( nullable = false  )
	public Date getStart() {
		return this.start;
		
	}
	

  
    /**  
     * Set the value related to the column: start.
	 * @param start the start value you wish to set
	 */
	public void setStart(final Date start) {
		this.start = start;
	}

    /**
     * Return the value associated with the column: tasteNotes.
	 * @return A String object (this.tasteNotes)
	 */
	@Column( name = "taste_notes", length = 1028  )
	public String getTasteNotes() {
		return this.tasteNotes;
		
	}
	

  
    /**  
     * Set the value related to the column: tasteNotes.
	 * @param tasteNotes the tasteNotes value you wish to set
	 */
	public void setTasteNotes(final String tasteNotes) {
		this.tasteNotes = tasteNotes;
	}

    /**
     * Return the value associated with the column: yeast.
	 * @return A Yeast object (this.yeast)
	 */
	@OneToOne( cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch=FetchType.EAGER )
	@JoinColumn(name = "yeast_id" )
	public Yeast getYeast() {
		return this.yeast;
		
	}
	

  
    /**  
     * Set the value related to the column: yeast.
	 * @param yeast the yeast value you wish to set
	 */
	public void setYeast(final Yeast yeast) {
		this.yeast = yeast;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public Recipe clone() throws CloneNotSupportedException {
		super.clone();  // keep hierarchy
        final Recipe copy = new Recipe();

		copy.setBrewNotes(this.getBrewNotes());
		copy.setEnd(this.getEnd());
		copy.setId(this.getId());
		copy.setName(this.getName());
		
		if (this.getHops() != null) {
			copy.getHops().addAll(this.getHops());
		}
		if (this.getMalts() != null) {
			copy.getMalts().addAll(this.getMalts());
		}
		copy.setStart(this.getStart());
		copy.setTasteNotes(this.getTasteNotes());
		copy.setYeast(this.getYeast());
		return copy;
	}
	
 
	


	/** Provides toString implementation.
	 * @see java.lang.Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		sb.append("brewNotes: " + this.getBrewNotes() + ", ");
		sb.append("end: " + this.getEnd() + ", ");
		sb.append("id: " + this.getId() + ", ");
		sb.append("name: " + this.getName() + ", ");
		sb.append("start: " + this.getStart() + ", ");
		sb.append("tasteNotes: " + this.getTasteNotes() + ", ");
		return sb.toString();		
	}


	/** Equals implementation. 
	 * @see java.lang.Object#equals(java.lang.Object)
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		Object proxyThat = aThat;
		
		if ( this == aThat ) {
			 return true;
		}

		
		if (aThat instanceof HibernateProxy) {
 			// narrow down the proxy to the class we are dealing with.
 			try {
				proxyThat = ((HibernateProxy) aThat).getHibernateLazyInitializer().getImplementation(); 
			} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		   	}
		}
		if (aThat == null)  {
			 return false;
		}
		
		final Recipe that; 
		try {
			that = (Recipe) proxyThat;
			if ( !(that.getClassType().equals(this.getClassType()))){
				return false;
			}
		} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		} catch (ClassCastException e) {
				return false;
		}
		
		
		boolean result = true;
		result = result && (((this.getId() == null) && ( that.getId() == null)) || (this.getId() != null  && this.getId().equals(that.getId())));
		result = result && (((getBrewNotes() == null) && (that.getBrewNotes() == null)) || (getBrewNotes() != null && getBrewNotes().equals(that.getBrewNotes())));
		result = result && (((getEnd() == null) && (that.getEnd() == null)) || (getEnd() != null && getEnd().equals(that.getEnd())));
		result = result && (((getName() == null) && (that.getName() == null)) || (getName() != null && getName().equals(that.getName())));
		result = result && (((getStart() == null) && (that.getStart() == null)) || (getStart() != null && getStart().equals(that.getStart())));
		result = result && (((getTasteNotes() == null) && (that.getTasteNotes() == null)) || (getTasteNotes() != null && getTasteNotes().equals(that.getTasteNotes())));
		result = result && (((getYeast() == null) && (that.getYeast() == null)) || (getYeast() != null && getYeast().equals(that.getYeast())));
		return result;
	}
	
	
	/** Calculate the hashcode.
	 * @see java.lang.Object#hashCode()
	 * @return a calculated number
	 */
	@Override
	public int hashCode() {
		if ( this.hashCode == null ) {
			synchronized ( this ) {
				if ( this.hashCode == null ) {
					Integer newHashCode = null;

					if ( getId() != null ) {
						newHashCode = SAVED_HASHES.get( getId() );
					}
					
					if ( newHashCode == null ) {
						if ( getId() != null && getId() != 0) {
							newHashCode = getId();
						} else {
							newHashCode = super.hashCode();

						}
					}
					
					this.hashCode = newHashCode;
				}
			}
		}
	return this.hashCode;
	}
	
	

	
}
